<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>比赛 on Aczy156</title>
    <link>http://chenranfei.xyz/tags/%E6%AF%94%E8%B5%9B/</link>
    <description>Recent content in 比赛 on Aczy156</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Aczy156</copyright>
    <lastBuildDate>Tue, 04 Feb 2020 16:12:46 +0800</lastBuildDate>
    
	<atom:link href="http://chenranfei.xyz/tags/%E6%AF%94%E8%B5%9B/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Contest CF719 div3 补题</title>
      <link>http://chenranfei.xyz/posts/contest/contest-cf719-div3/</link>
      <pubDate>Tue, 04 Feb 2020 16:12:46 +0800</pubDate>
      
      <guid>http://chenranfei.xyz/posts/contest/contest-cf719-div3/</guid>
      <description>[TOC]
CF719 div3 补题  https://codeforces.com/contest/1520
 A 题目大意：看字串中是否有重复出现的，连续一段出现可以，中间隔着其他的，然后再次出现就不行了。
思路：用map来维护前面所出现过的所有字符，看是否存在
#include &amp;lt;bits/stdc++.h&amp;gt;using namespace std; int t, n; #include &amp;lt;map&amp;gt;map&amp;lt;char, int&amp;gt; m; char s[55]; int main() { scanf(&amp;#34;%d&amp;#34;, &amp;amp;t); while (t--) { int flag = 0; m.clear(); scanf(&amp;#34;%d%s&amp;#34;, &amp;amp;n, s); m[s[0]] = 1; for (int i = 1; i &amp;lt; strlen(s); ++i) { if (s[i] != s[i - 1] &amp;amp;&amp;amp; m.count(s[i])) flag = 1; else m[s[i]] = 1; } if (flag) printf(&amp;#34;NO\n&amp;#34;); else printf(&amp;#34;YES\n&amp;#34;); } return 0; } B 题目大意：找1～n范围中，所有数都相同的数（1 2 88 444是，101 67 1239不是）</description>
    </item>
    
    <item>
      <title>Contest CSU 2021 预选赛 补题</title>
      <link>http://chenranfei.xyz/posts/contest/contest-csu2021pre/</link>
      <pubDate>Tue, 04 Feb 2020 16:12:46 +0800</pubDate>
      
      <guid>http://chenranfei.xyz/posts/contest/contest-csu2021pre/</guid>
      <description>[TOC]
CSU 2021 预选赛 补题  http://acm.csu.edu.cn:20080/csuoj/contest/problemset?cid=2193
 A 题目大意：贪心，可以无限选，然后问给定容积，最大价值。
思路永远选单位价值最大的，然后逐级取余。
#include &amp;lt;iostream&amp;gt;using namespace std; int a, ans; int main() { scanf(&amp;#34;%d&amp;#34;, &amp;amp;a); ans += (a/16)*227; a %= 16; ans += (a/8)*109; a %= 8; ans += (a/4)*49; a %= 4; ans += (a/2)*23; a %= 2; ans += a*10; printf(&amp;#34;%d\n&amp;#34;, ans); return 0; } B C D </description>
    </item>
    
    <item>
      <title>Contest CSU 2022 预选赛 补题</title>
      <link>http://chenranfei.xyz/posts/contest/contest-csu2022pre/</link>
      <pubDate>Tue, 04 Feb 2020 16:12:46 +0800</pubDate>
      
      <guid>http://chenranfei.xyz/posts/contest/contest-csu2022pre/</guid>
      <description>[TOC]
CSU 2022 预选赛 补题 A 题目大意：计算期望。概率*次数，其中，概率会随着次数的增加，按照一定规律进行变化。
进行模拟即可。
#include &amp;lt;iostream&amp;gt;using namespace std; double a, b, c, d, e, na; int n, T; double ans, base; int main() { scanf(&amp;#34;%d&amp;#34;, &amp;amp;T); for (int i = 0; i &amp;lt; T; ++i) { ans = 0;base = 1.0; scanf(&amp;#34;%lf%lf%lf%lf%lf%d&amp;#34;, &amp;amp;a, &amp;amp;b, &amp;amp;c, &amp;amp;d, &amp;amp;e, &amp;amp;n); na = a; int j; for (j = 1; j &amp;lt;= n; ++j) { ans += base*a*j; base *= (1-a)*1.</description>
    </item>
    
    <item>
      <title>Contest ICT pFind</title>
      <link>http://chenranfei.xyz/posts/contest/contest-ict-pfind/</link>
      <pubDate>Tue, 04 Feb 2020 16:12:46 +0800</pubDate>
      
      <guid>http://chenranfei.xyz/posts/contest/contest-ict-pfind/</guid>
      <description>[TOC]
ICT pFind  机试：共五道，前两个签到，第三个大数乘法，第四个区间最值问题，第五个数据结构二叉树问题
 机试-1 题目大意：将二维数组进行翻转
思路：储存在二维数组中，利用循环来进行翻转然后输出。
#include &amp;lt;iostream&amp;gt;using namespace std; const int maxn = 209; int n, a[maxn][maxn]; int main() { scanf(&amp;#34;%d&amp;#34;, &amp;amp;n); for (int i = 1; i &amp;lt;= n; ++i) for (int j = 1; j &amp;lt;= n; ++j) scanf(&amp;#34;%d&amp;#34;, &amp;amp;a[i][j]); for (int i = 1; i &amp;lt;= n; ++i) { for (int j = 1; j &amp;lt;= n; ++j) { printf(&amp;#34;%d &amp;#34;, a[n-j+1][i]); } printf(&amp;#34;\n&amp;#34;); } return 0; } 机试-2 题目大意：括号匹配，非左右括号的按照异常处理，然后查看左右括号是否匹配</description>
    </item>
    
  </channel>
</rss>