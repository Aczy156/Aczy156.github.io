<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web on Aczy156</title>
    <link>https://chenranfei.site/tags/web/</link>
    <description>Recent content in Web on Aczy156</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Aczy156</copyright>
    <lastBuildDate>Wed, 08 Apr 2020 20:42:26 +0800</lastBuildDate>
    
	<atom:link href="https://chenranfei.site/tags/web/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java Web Spring</title>
      <link>https://chenranfei.site/posts/project/java-spring/</link>
      <pubDate>Wed, 08 Apr 2020 20:42:26 +0800</pubDate>
      
      <guid>https://chenranfei.site/posts/project/java-spring/</guid>
      <description>[TOC]
Java Web Spring IOC [依赖注入/控制反转] 1、例子：class A中引入class B，两种方法：
 传统方法：在A中new一个class B的类。这样是A控制着B。 IOC：在A的构造函数中注入一个已经提前new好的class B的类。这样B还是B，不受A的控制。  2、在Spring中的使用：消除所有依赖关系 and 工厂模式
a）消除所有依赖关系：通过控制反转提前new出需要new的类。
b）工厂模式：用一个工厂来提前把所有需要new的类给new出来。供所有需要注入的类去注入。其中有两种工厂模式来进行对象的映射
 简单工厂：静态，单个唯一的工厂 工厂方法：动态，一个抽象的、产生工厂的唯一工厂+有多少个产品就有多少个具体工厂的具体工厂（这些工厂是有抽象工厂挨个产生的）。  AOP [面向切面编程] 最简单的理解：为目标对象创建一个代理对象，通过代理对象调用目标对象，并且可以在目标对象前后进行切面编程
单例模式 Spring依赖注入的Bean实例是单例的。
每一个类都仅有一个实例，并且提供了一个全局访问点，也就是BeanFactory，只能通过这个访问点来获取实例。（创建则是在每次初始化运行的时候创建的）
Spring MVC [Spring 的 Handler接口] 利用适配器模式，每每需要新增/扩展一个Controller来处理请求，就直接实现接口，implement Controller，然后直接实现返回值为ModelAndView的handleRequest方法即可。
配置文件   Maven：只要用maven进行包管理，那么必定有pom.xml，里边写了各种需要的依赖
  Spring MVC：
 整个项目，命名空间、schema设置-&amp;gt;applicationContext.xml； servlet之间映射关系，URL与Controller，请求与处理请求-&amp;gt;dispatcher-servlet.xml； 其他URL的映射关系-&amp;gt;web.xml    Spring Boot：唯一的application.properties配置文件。（配置包括JDBC、Mybatis、logging等等各种都可以在这唯一的配置文件中配置）
  运行项目 myPetStore - 利用Spring boot的jpetsotre 项目地址：https://github.com/Aczy156/myPetStore
 clone之后，运行的时候需要注意：resource目录的目录类型没有同步为resource root，导致运行项目的时候spring容器无法识别，导致application.properties中的很多属性无法被正常提取，所以无法运行。参考博客  运行项目 NewPetStore - 前后端分离 Nuxt.</description>
    </item>
    
    <item>
      <title>Java Web 项目</title>
      <link>https://chenranfei.site/posts/project/java-web/</link>
      <pubDate>Wed, 08 Apr 2020 20:42:26 +0800</pubDate>
      
      <guid>https://chenranfei.site/posts/project/java-web/</guid>
      <description>[TOC]
Java Web 最基础JavaWeb：Web-INF工程 过程：
 直接创建基础Java项目 利用创建出来的空Java项目，添加「框架支持」“Add Frameworks Support” 利用Java EE中的Web Application 即可构建最最最基本的Java web框架  易错点：
 空工程，没有依赖/或者类似maven的包管理工具，所以依赖需要手动倒入，各种jar包。 两种配置servlet的写法中：  利用.xml配置文件的写法，容易忘记写servlet-class标签，这样就无法响应servlet 利用标签的写法，会利用name属性去找对应的类，找不到对应的类就会出问题，直接在tomcat容器里跑不起来。   tomcat配置内容，artifact配置注意会默认有war_exploded这个出现在链接里，也即是最后打包之后放在tomcat里边的内容，链接里要加入的。如果想删除，不仅要在server里边删除，也要在「deployment」部署里边删除  </description>
    </item>
    
    <item>
      <title>Python PyTorch RNN TextCNN</title>
      <link>https://chenranfei.site/posts/project/pytorch-rnn-textcnn/</link>
      <pubDate>Wed, 08 Apr 2020 20:42:26 +0800</pubDate>
      
      <guid>https://chenranfei.site/posts/project/pytorch-rnn-textcnn/</guid>
      <description>[TOC]
PyTorch RNN TextCNN PyTorch RNN  数据预处理：通过numpy模拟产生数据，然后利用matplotlib来渲染数据   目录结构  config：存放全局变量（超参数） data-preparation：做数据预处理 models：存放所有的模型，用来进行调用 train：模型训练的整个过程  分开目录结构之后文件之间相互引用 无法相互引用的两大原因：
 整体项目文件类型：该项目所对应的文件类型要修改 =&amp;gt; 右键选中当前project--&amp;gt;Mark Directory as --&amp;gt; Sources Root. （修改了之后的该项目所对应的文件性质应该呈现蓝色） 相互引用的文件命名：所有的命名中都不可以出现- (间隔符)，但是可以_ (下划线)  </description>
    </item>
    
  </channel>
</rss>