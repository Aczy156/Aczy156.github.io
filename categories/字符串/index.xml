<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>字符串 on Aczy156</title>
    <link>https://chenranfei.xyz/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
    <description>Recent content in 字符串 on Aczy156</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Aczy156</copyright>
    <lastBuildDate>Mon, 01 Feb 2021 19:03:55 +0800</lastBuildDate>
    
	<atom:link href="https://chenranfei.xyz/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Algorithm1.0 字符串基本</title>
      <link>https://chenranfei.xyz/posts/acm/%E5%AD%97%E7%AC%A6%E4%B8%B2/algorithm1.0-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9F%BA%E6%9C%AC/</link>
      <pubDate>Mon, 01 Feb 2021 19:03:55 +0800</pubDate>
      
      <guid>https://chenranfei.xyz/posts/acm/%E5%AD%97%E7%AC%A6%E4%B8%B2/algorithm1.0-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9F%BA%E6%9C%AC/</guid>
      <description>[TOC]
字符串基本 数字字符串的排序 (直接用数字排序即可) https://www.luogu.com.cn/problem/P3955
思路：首先按照长度排序，然后如果长度相等了，在直接字符串比较大小
#include &amp;lt;iostream&amp;gt;using namespace std; const int maxn = 1e3+9; int n, q, l; string s[maxn], sq; #include &amp;lt;algorithm&amp;gt; bool cmp(string s1, string s2) { if (s1.length() == s2.length()) return s1 &amp;lt; s2; return s1.length() &amp;lt; s2.length(); } int main() { scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;n, &amp;amp;q); for (int i = 1; i &amp;lt;= n; ++i) cin&amp;gt;&amp;gt;s[i]; sort(s+1, s+1+n, cmp); for (int i = 1; i &amp;lt;= q; ++i) { cin&amp;gt;&amp;gt;l&amp;gt;&amp;gt;sq; int fd = 0; for (int j = 1; j &amp;lt;= n; ++j) { if (l &amp;gt; s[j].</description>
    </item>
    
    <item>
      <title>Algorithm1.1 字符串-map匹配</title>
      <link>https://chenranfei.xyz/posts/acm/%E5%AD%97%E7%AC%A6%E4%B8%B2/algorithm1.1-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9F%BA%E6%9C%AC%E6%98%A0%E5%B0%84%E5%8C%B9%E9%85%8D/</link>
      <pubDate>Mon, 01 Feb 2021 19:03:55 +0800</pubDate>
      
      <guid>https://chenranfei.xyz/posts/acm/%E5%AD%97%E7%AC%A6%E4%B8%B2/algorithm1.1-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9F%BA%E6%9C%AC%E6%98%A0%E5%B0%84%E5%8C%B9%E9%85%8D/</guid>
      <description>[TOC]
字符串映射 利用map进行字串匹配、替换 https://www.luogu.com.cn/problem/P1603
题目大意：给六个字符串，然后如果有映射的进行映射为数字，没有的就不映射。输出最后映射完的结果
1、准备数据结构：用于匹配的map字典=&amp;gt;将字符串与数字进行映射
2、易错：第一位随便匹配，后面的位数如果是1位的话，拼接到一起之前要补0，例如如果是5，要输出05。
声明字符串映射的数据结构map
// 声明map map&amp;lt;string, int&amp;gt; mp; // 进行映射 mp[&amp;#34;one&amp;#34;] = 1; mp[&amp;#34;two&amp;#34;] = 2; /* ……*/ mp[&amp;#34;nineteen&amp;#34;] = 19; mp[&amp;#34;twenty&amp;#34;] = 20; mp[&amp;#34;one&amp;#34;] = 1; 进行匹配：
int main() { for (int i = 0; i &amp;lt; 6; ++i) { cin&amp;gt;&amp;gt;str; if (mp[str]){ int cnt = mp[str]*mp[str]%100; if (!cnt) continue; ans[idx++] = cnt; } } sort(ans, ans+idx); printf(&amp;#34;%d&amp;#34;, ans[0]); for (int i = 1; i &amp;lt; idx; ++i) { if (ans[i] &amp;lt; 10) printf(&amp;#34;0&amp;#34;); printf(&amp;#34;%d&amp;#34;, ans[i]); } return 0; } 两个map进行正向反向映射 https://www.</description>
    </item>
    
    <item>
      <title>Algorithm1.2 字符串数据结构 Trie树</title>
      <link>https://chenranfei.xyz/posts/acm/%E5%AD%97%E7%AC%A6%E4%B8%B2/algorithm1.2-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84trie%E6%A0%91/</link>
      <pubDate>Mon, 01 Feb 2021 19:03:55 +0800</pubDate>
      
      <guid>https://chenranfei.xyz/posts/acm/%E5%AD%97%E7%AC%A6%E4%B8%B2/algorithm1.2-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84trie%E6%A0%91/</guid>
      <description>[TOC]
字符串 数据结构 Trie树  工程开发中的应用：浏览器的搜索框内容提示功能
demo：Trie树维护的字典：[he, his, hers, she]，要从字典里查到的单词：ahishers
构建Trie树：
 node节点结构体：  当前节点的值 存放指向下一层node节点指针的List（最多26个=&amp;gt;26个字母）   bool数组：标记某一个节点是否是尾部节点【例如下图中的trie树双层圈的都是】  通过root往下查询某一个待测字串：
 查找正确：  到双层圈的节点 =&amp;gt; 完成完全匹配 未到双层圈的节点 =&amp;gt; 完成部分(前缀)匹配   查找错误：  空指针 =&amp;gt; 直接从root根节点就无法匹配 未找到双层圈的节点 =&amp;gt; 完成部分(前缀)匹配     [模版] 点名问题 https://www.luogu.com.cn/problem/P2580
题目大意：给出若干个人的名字，多次询问看某个询问是否是第一次出现 &amp;amp; 重复出现【字典树最基本的应用】 &amp;amp; 错误名字
1、数据结构：
ch[maxn][字符串的涉及字符空间]，一般字典树第二维都是26，26个字母
val[maxn]用来记录索引到这个点的值，例如学生名字是索引的字典，这个学生的各个成绩就是val这个值，exist[maxn]用来记录是否存在或者重复访问
2、常用操作：
插入insert：
查找query：
 是否存在或者重复访问，访问exist数组 字符串对应的值，访问val数组  AC代码：只需访问exist，看是否存在或者重复访问
#include &amp;lt;iostream&amp;gt;using namespace std; #include &amp;lt;cstring&amp;gt;#define maxn 500010struct trie { int nex[maxn][26], cnt; int exist[maxn]; // 0 没出现；1 第一出现；2 重复出现  int val[maxn]; // -1 查不到这个人的对应的值  void insert(char *s) { int p = 0, l = strlen(s); for (int i = 0; i &amp;lt; l; i++) { int c = s[i] - &amp;#39;a&amp;#39;; if (!</description>
    </item>
    
    <item>
      <title>Algorithm1.3 KMP</title>
      <link>https://chenranfei.xyz/posts/acm/%E5%AD%97%E7%AC%A6%E4%B8%B2/algorithm1.3-kmp/</link>
      <pubDate>Mon, 01 Feb 2021 19:03:55 +0800</pubDate>
      
      <guid>https://chenranfei.xyz/posts/acm/%E5%AD%97%E7%AC%A6%E4%B8%B2/algorithm1.3-kmp/</guid>
      <description>[TOC]
字符串 KMP  工程开发中的应用：浏览器的搜索框内容提示功能
demo：Trie树维护的字典：[he, his, hers, she]，要从字典里查到的单词：his
构建Trie树：利用一个bool数组来标记某一个节点是否是尾部节点【例如下图中的trie树双层圈的都是】
通过root往下查询某一个待测字串：
 查找正确：  到双层圈的节点 =&amp;gt; 完成完全匹配 未到双层圈的节点 =&amp;gt; 完成部分(前缀)匹配   查找错误：  空指针 =&amp;gt; 直接从root根节点就无法匹配 未找到双层圈的节点 =&amp;gt; 完成部分(前缀)匹配     [模版] 点名问题 https://www.luogu.com.cn/problem/P2580
题目大意：给出若干个人的名字，多次询问看某个询问是否是第一次出现 &amp;amp; 重复出现【字典树最基本的应用】 &amp;amp; 错误名字
1、数据结构：
ch[maxn][字符串的涉及字符空间]，一般字典树第二维都是26，26个字母
val[maxn]用来记录索引到这个点的值，例如学生名字是索引的字典，这个学生的各个成绩就是val这个值，exist[maxn]用来记录是否存在或者重复访问
2、常用操作：
插入insert：
查找query：
 是否存在或者重复访问，访问exist数组 字符串对应的值，访问val数组  AC代码：只需访问exist，看是否存在或者重复访问
#include &amp;lt;iostream&amp;gt;using namespace std; #include &amp;lt;cstring&amp;gt;#define maxn 500010struct trie { int nex[maxn][26], cnt; int exist[maxn]; // 0 没出现；1 第一出现；2 重复出现  int val[maxn]; // -1 查不到这个人的对应的值  void insert(char *s) { int p = 0, l = strlen(s); for (int i = 0; i &amp;lt; l; i++) { int c = s[i] - &amp;#39;a&amp;#39;; if (!</description>
    </item>
    
    <item>
      <title>Algorithm1.4 AC自动机</title>
      <link>https://chenranfei.xyz/posts/acm/%E5%AD%97%E7%AC%A6%E4%B8%B2/algorithm1.4-ac%E8%87%AA%E5%8A%A8%E6%9C%BA/</link>
      <pubDate>Mon, 01 Feb 2021 19:03:55 +0800</pubDate>
      
      <guid>https://chenranfei.xyz/posts/acm/%E5%AD%97%E7%AC%A6%E4%B8%B2/algorithm1.4-ac%E8%87%AA%E5%8A%A8%E6%9C%BA/</guid>
      <description>[TOC]
字符串 AC自动机  demo：AC自动机维护：[he, his, hers, she]，要查询的单词：ahishers
过程一：构建Trie树：
 node节点结构体：  当前节点的值 存放指向下一层node节点指针的List（最多26个=&amp;gt;26个字母） fail失效指针：用来找最长相同后缀，节省从头查找的时间 【特殊】对于是某一个p的结尾节点的，这个特殊的节点储存更多信息   利用一个bool数组来标记某一个节点是否是尾部节点【例如下图中的trie树双层圈的都是】  过程二：构建AC自动机
完善fail指针
过程三：输入待测字串进行测试
通过root往下查询某一个待测字串：
 查找正确：  到双层圈的节点 =&amp;gt; 完成完全匹配 未到双层圈的节点 =&amp;gt; 完成部分(前缀)匹配   查找错误：  空指针 =&amp;gt; 直接从root根节点就无法匹配 未找到双层圈的节点 =&amp;gt; 完成部分(前缀)匹配     方法一：利用链表实现
数据结构：结构体和指向结构体的指针
方法二：利用数组实现
1、初始化trie树「trie[][]树，cnt[]数组判定节点是否是字典终止节点」
对应位置初始化上值，cnt数组进行初始化
2、初始化fail指针「当前节点nw，遍历到的当前节点nw的儿子pos」
对于当前节点，那么他的所有儿子节点就是for(i~[0, 26]) pos = trie[nw][i]表示所有儿子的值。
 如果当前儿子为真儿子，那么trie[nw][i]不为0 =&amp;gt; fail[pos] = trie[fail[nw]][i];对于当前节点nw的fail指针是已知的，所以就要利用当前nw节点的fail指针来更新他的所有儿子节点的fail指针 =&amp;gt; 真儿子的fail指针指向当前节点的fail指针对应的指向方向的节点  if (!fail[pos]) fail[pos] = 1; 此时刷新出来的指向的方向不一定有值，也就是说有可能指向的那个也是空 =&amp;gt; 就要替换成父节点 else就正常赋值就好，赋成当前节点的fail指针指向的节点的对应方向   如果当前儿子为假儿子，可以将fail指针指向的节点相同方向的值赋过去（fail指针指向的节点有值是最好的，没有值也无所谓）相当于把fail指针指向的节点那棵树嫁接在了这个节点下边  3、利用AC自动机进行搜索「当前节点nw，pos」</description>
    </item>
    
  </channel>
</rss>