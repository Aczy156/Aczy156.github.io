<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>STL on Aczy156</title>
    <link>https://chenranfei.xyz/categories/stl/</link>
    <description>Recent content in STL on Aczy156</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Aczy156</copyright>
    <lastBuildDate>Mon, 01 Feb 2021 19:03:55 +0800</lastBuildDate>
    
	<atom:link href="https://chenranfei.xyz/categories/stl/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Algorithm20.1 STL map</title>
      <link>https://chenranfei.xyz/posts/acm/stl/algorithm20.1-stl-map/</link>
      <pubDate>Mon, 01 Feb 2021 19:03:55 +0800</pubDate>
      
      <guid>https://chenranfei.xyz/posts/acm/stl/algorithm20.1-stl-map/</guid>
      <description>[TOC]
STL - map  【注意，此处的map是指的c++STL的map，c++STL的map的底层时红黑树，而Java的map的底层是哈希，类似于unordered_map，本质不同】
map底层：红黑树（一种非严格意义上的平衡二叉树）【利用二叉树来进行查询、插入、删除=&amp;gt;O(logn)】map内部所有的数据都是无重复+有序的
map有序性：map的key需要定义operator &amp;lt;。一般的数据类型系统已经确定了（如果是结构体做key的话，需要重载小于号。）
  unordered_map底层：hash_value【利用哈希来进行查询、插入、删除=&amp;gt;O(1)】unordered_map内部的数据只保证无重复 （不能保证有序）
unordered_map无重复性：unordered_map需要重载 == ，因为他判断重复就是看 ==。一般的数据类型系统已经确定了（如果是结构体做key的话，需要重载==。）
  vector+pair实现：
  map与unordered_map VS set与multiset:
map有序，而unordered_map的无序性，但是两者都保持的是key唯一。
set唯一，而multiset不唯一，可重复，但是两者都保持的是有序。
 查看是否已经映射 https://www.luogu.com.cn/problem/P1918
#include &amp;lt;iostream&amp;gt;using namespace std; #include &amp;lt;map&amp;gt;map&amp;lt;int, int&amp;gt; mp; int n, m, t; int main() { scanf(&amp;#34;%d&amp;#34;, &amp;amp;n); for (int i = 1; i &amp;lt;= n; ++i) {scanf(&amp;#34;%d&amp;#34;, &amp;amp;t);mp[t] = i;} scanf(&amp;#34;%d&amp;#34;, &amp;amp;m); while (m--) { scanf(&amp;#34;%d&amp;#34;, &amp;amp;t); if (mp.count(t)) printf(&amp;#34;%d\n&amp;#34;, mp[t]); else printf(&amp;#34;0\n&amp;#34;); } return 0; } 管理系统映射 https://www.</description>
    </item>
    
    <item>
      <title>Algorithm20.2 STL set</title>
      <link>https://chenranfei.xyz/posts/acm/stl/algorithm20.2-stl-set/</link>
      <pubDate>Mon, 01 Feb 2021 19:03:55 +0800</pubDate>
      
      <guid>https://chenranfei.xyz/posts/acm/stl/algorithm20.2-stl-set/</guid>
      <description>[TOC]
STL - set set基础语法整理博客：
https://www.luogu.com.cn/blog/communist/stl-zheng-li-zhi-set
 set底层：红黑树
set关键字唯一性【类似于map中的key，只出现一次】：保证set中所有元素只出现一次
set序列递增性：如果不是int的话需要重载运算符
使用场景：维护一个不重复的数据结构 =》 类似于unique的结构【拓展延伸：可以维护一个结构体，然后来看是否重复】
  multiset底层：红黑树
multiset关键字不唯一，可重复性
  map与unordered_map VS set与multiset:
map有序，而unordered_map的无序性，但是两者都保持的是key唯一。
set唯一，而multiset不唯一，可重复，但是两者都保持的是有序。
 basic
int main() { scanf(&amp;#34;%d&amp;#34;, &amp;amp;n); for (int i = 1; i &amp;lt;= n; ++i) scanf(&amp;#34;%d&amp;#34;, a+i); set&amp;lt;int&amp;gt; s(a+1, a+1+n); auto iter = s.begin(); // 输出，发现保证了有序性  while (iter != s.end()) { printf(&amp;#34;%d &amp;#34;, *iter);iter++; } // 然后再插入新的元素，查看是否有去重复  cin&amp;gt;&amp;gt;t; s.insert(t); cout&amp;lt;&amp;lt;endl; auto iter2 = s.</description>
    </item>
    
  </channel>
</rss>