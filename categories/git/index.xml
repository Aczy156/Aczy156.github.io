<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on Aczy156</title>
    <link>https://chenranfei.xyz/categories/git/</link>
    <description>Recent content in Git on Aczy156</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Aczy156</copyright>
    <lastBuildDate>Wed, 08 Apr 2020 20:42:26 +0800</lastBuildDate>
    
	<atom:link href="https://chenranfei.xyz/categories/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tool-Clion用法</title>
      <link>https://chenranfei.xyz/posts/tool/tool-clion%E7%94%A8%E6%B3%95/</link>
      <pubDate>Wed, 08 Apr 2020 20:42:26 +0800</pubDate>
      
      <guid>https://chenranfei.xyz/posts/tool/tool-clion%E7%94%A8%E6%B3%95/</guid>
      <description>[TOC]
Clion用法 CMakeLists.txt写法 cmake扫描目录的所有cpp文件，可以在一个项目中跑所有的代码，运行所有的main函数
cmake_minimum_required(VERSION 3.15)project(CCFCSP)set(CMAKE_CXX_STANDARD 14)# 遍历项目根目录下所有的 .cpp 文件 file (GLOB files *.cpp)foreach (file ${files}) string(REGEX REPLACE &amp;#34;.+/(.+)\\..*&amp;#34; &amp;#34;\\1&amp;#34; exe ${file}) add_executable (${exe} ${file}) message (\ \ \ \ --\ src/${exe}.cpp\ will\ be\ compiled\ to\ bin/${exe})endforeach ()注意：要保证每次新建的时候不修改CMakeLists.txt。在new cpp source file的时候，不勾选自动修改CMakeLists文件
模版代码修改 在clion的系统设置中进行修改=&amp;gt;找到新建c source file 的对应内容，第一行要写成#[[#include]]# &amp;lt;iostream&amp;gt;，然后后面是自动化的内容。
#[[#include]]# &amp;lt;iostream&amp;gt; using namespace std; int main() { return 0; } </description>
    </item>
    
    <item>
      <title>Tool-Git语法</title>
      <link>https://chenranfei.xyz/posts/tool/tool-git%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Wed, 08 Apr 2020 20:42:26 +0800</pubDate>
      
      <guid>https://chenranfei.xyz/posts/tool/tool-git%E8%AF%AD%E6%B3%95/</guid>
      <description>[TOC]
Git 基础定义 定义：版本控制管理工具
几个位置：
 工作区  版本库   暂存区 仓库  本地仓库 远端仓库    基础语法 git init 【修改】初始化当前目录变成可以用git进行接管的文件目录。在整个工作区中会产生一个.git文件，存放版本库。
git add . git add README.md 【移动】将该目录的所有文件/README.md文件添加到缓存区
（注意，虽然移动到了暂缓区，但是还没有被提交到本地仓库，因此在add之后，查看log，还是没有记录这个版本的「此时的status显示红色」，包括查看reflog，也是没有这个版本的）然后将文件加入工作区之后「此时status显示绿色」
git commit -m &amp;#34;xxx 提交到本地仓库&amp;#34; 【移动】将缓存区的文件提交到本地仓库
git status 【查看】
 文件：看缓存区是否还有尚未提交到本地仓库的文件 文件：看缓存区文件里的内容和本地仓库文件里的内容是否有不一致的 分支：当前处于哪个分支  git diff README.md 【查看】看某个文件不一致在哪里，回来类似于cat语句将不一样的地方输出出来
git log git log --pretty=oneline 【查看】看所有的缓存区提交到本地仓库的记录（通过添加参数保证所有的内容都在一行内显示）
git reset HEAD * 【操作】清空缓存区：移除暂存区的内容，然后利用.gitignore忽略掉不想commit的文件，然后再将对应文件添加进入缓存区
git reflog 【查看】看到所有本地仓库的历史记录的版本号，可以利用获取到的版本好来随意移动到本地仓库的对应版本
git reset --hard HEAD^ git reset --hard HEAD^^ git reset --hard HEAD~100 git reset --hard 6fcfc89 【前后移动+修改】</description>
    </item>
    
  </channel>
</rss>