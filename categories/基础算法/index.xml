<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>基础算法 on Aczy156</title>
    <link>http://www.chenranfei.online/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 基础算法 on Aczy156</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Aczy156</copyright>
    <lastBuildDate>Mon, 01 Feb 2021 19:03:55 +0800</lastBuildDate>
    
	<atom:link href="http://www.chenranfei.online/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Algorithm10 二分</title>
      <link>http://www.chenranfei.online/posts/acm/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/algorithm10-%E4%BA%8C%E5%88%86/</link>
      <pubDate>Mon, 01 Feb 2021 19:03:55 +0800</pubDate>
      
      <guid>http://www.chenranfei.online/posts/acm/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/algorithm10-%E4%BA%8C%E5%88%86/</guid>
      <description>二分  查找的几种：
 暴力遍历：O(n) 折半查找/二分查找：O(log2n) 哈希：O(1)  其中，二分就是折半查找。
 关键点：等于号的选取、l/r的区间范围的更改、check函数
整数二分
1 =&amp;gt; l &amp;lt;= r
while (l &amp;lt;= r) { mid = (l+r)&amp;gt;&amp;gt;1; if (mid == 0) {ans = mid;break;} if (check(mid)) l = (ans=mid)+1; else r = mid-1; } 2 =&amp;gt; l+1 &amp;lt; r
while (l + 1 &amp;lt; r) { mid = (l + r) / 2; if (f(mid)) l = mid; else r = mid; } cout &amp;lt;&amp;lt; l &amp;lt;&amp;lt; endl; https://www.</description>
    </item>
    
    <item>
      <title>Algorithm12 并查集</title>
      <link>http://www.chenranfei.online/posts/acm/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/algorithm12-%E5%B9%B6%E6%9F%A5%E9%9B%86/</link>
      <pubDate>Mon, 01 Feb 2021 19:03:55 +0800</pubDate>
      
      <guid>http://www.chenranfei.online/posts/acm/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/algorithm12-%E5%B9%B6%E6%9F%A5%E9%9B%86/</guid>
      <description>并查集 模版-查看两个元素是否在一个集合中 https://www.luogu.com.cn/problem/P1551
题目大意：
1、findfa写法：return fa[x]==x?x:findfa(fa[x]);
 如果fa[x] == x，则代表这个节点就是代表这个集合的中心。 如果fa[x] != x，继续递归往上找，findfa(fa[x])  「路径压缩，把一条线的树结构给压缩成一个矮宽胖的类似于dom树结构的样式」：return fa[x]==x?x:fa[x]=findfa(fa[x]);
 通过在路径中对fa进行赋值，来保证路径上的fa都是那个父亲节点 可以看出指向关系的根。（类似题目找到某个节点的最终指向）  2、存放同个集合的关系：如果findfa(a)!=findafa(b)=&amp;gt;就可以直接让找到的顶上的直接赋给另一个的顶上。也即fa[findfa(a)]=findafa(b)或者fa[findfa(b)]=findafa(a)
#include &amp;lt;iostream&amp;gt;using namespace std; #define maxn 5005int n, m, p, fa[maxn], ta, tb; int findfa(int x){return fa[x] == x?x:findfa(fa[x]);} int main() { scanf(&amp;#34;%d%d%d&amp;#34;, &amp;amp;n, &amp;amp;m, &amp;amp;p); // init  for (int i = 1; i &amp;lt;= n; ++i) fa[i]=i; for (int i = 1; i &amp;lt;= m; ++i) { scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;ta, &amp;amp;tb); if (findfa(ta) !</description>
    </item>
    
    <item>
      <title>Algorithm13 前缀和与差分</title>
      <link>http://www.chenranfei.online/posts/acm/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/algorithm13-%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/</link>
      <pubDate>Mon, 01 Feb 2021 19:03:55 +0800</pubDate>
      
      <guid>http://www.chenranfei.online/posts/acm/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/algorithm13-%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/</guid>
      <description>前缀和与差分 一维的 最大子区间和 https://www.luogu.com.cn/problem/P1115
题目大意：一维数组，求最大子区间的和
（一）、前缀和思想：维护一个sum来描述当前索引位置之前的是否要存留。大于零就存储，小于零就归零。
#include &amp;lt;iostream&amp;gt;using namespace std; int n, prefix, tem, ans=1&amp;lt;&amp;lt;31; int main() { scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;n, &amp;amp;prefix); while (--n) { scanf(&amp;#34;%d&amp;#34;, &amp;amp;tem); prefix += tem; ans = max(ans, prefix); if (prefix &amp;lt; 0) prefix = 0; } printf(&amp;#34;%d\n&amp;#34;, ans); return 0; } （二）、dp思想
1、dp[i]表示当前位置之前的、包含自己的最大的子段，也就是说最大的要不就是单独的自己、要不就是自己加上前面的任意长度。dp[i] = max(dp[i-1]+now, now);
2、在最后要遍历一边所有的dp，也就是所有的位置上最长的，而不只是最后的那个dp[n]，是要筛选出dp[1]~dp[n]中最大的
#include &amp;lt;iostream&amp;gt;using namespace std; int ans = -999999, tmp, i, n, dp[200100] = {0}; int main() { scanf(&amp;#34;%d&amp;#34;, &amp;amp;n); for (i = 1; i &amp;lt;= n; ++i) { scanf(&amp;#34;%d&amp;#34;, &amp;amp;tmp); dp[i] = max(dp[i - 1] + tmp, tmp); ans = max(ans, dp[i]); } printf(&amp;#34;%d\n&amp;#34;, ans); return 0; } 二维的 最大子区域和 https://www.</description>
    </item>
    
    <item>
      <title>Algorithm15 倍增</title>
      <link>http://www.chenranfei.online/posts/acm/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/algorithm15-%E5%80%8D%E5%A2%9E/</link>
      <pubDate>Mon, 01 Feb 2021 19:03:55 +0800</pubDate>
      
      <guid>http://www.chenranfei.online/posts/acm/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/algorithm15-%E5%80%8D%E5%A2%9E/</guid>
      <description>倍增 拼凑砝码 https://www.luogu.com.cn/problem/P2347
#include &amp;lt;iostream&amp;gt;using namespace std; int w[8] = {1, 2, 3, 5, 10, 20}, t; #include &amp;lt;bitset&amp;gt;bitset&amp;lt;1010&amp;gt; s; int main() { s[0] = 1; for (int i = 0; i &amp;lt; 6; ++i) { scanf(&amp;#34;%d&amp;#34;, &amp;amp;t); for (int j = 0; j &amp;lt; t; ++j) s |= s&amp;lt;&amp;lt;w[i]; } printf(&amp;#34;Total=%d\n&amp;#34;, s.count()-1); return 0; } </description>
    </item>
    
    <item>
      <title>Algorithm19 递推与递归</title>
      <link>http://www.chenranfei.online/posts/acm/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/algorithm19-%E9%80%92%E6%8E%A8%E4%B8%8E%E9%80%92%E5%BD%92/</link>
      <pubDate>Mon, 01 Feb 2021 19:03:55 +0800</pubDate>
      
      <guid>http://www.chenranfei.online/posts/acm/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/algorithm19-%E9%80%92%E6%8E%A8%E4%B8%8E%E9%80%92%E5%BD%92/</guid>
      <description>递推与递归 斐波那契数列 （高精度） https://www.luogu.com.cn/problem/P1255
(相似题目：https://www.luogu.com.cn/problem/P2437)
题目大意：上楼梯，一次上一步或者一次上两步，问上n阶的楼梯可以有多少种走法
1、递推公式：d[i] = d[i-1]+d[i-2];
2、斐波那契数列在n=50的时候就已经将int爆掉，所以如果n=5000的时候需要用高精度。
AC代码：
#include &amp;lt;iostream&amp;gt;using namespace std; #define maxn 5005typedef long long ll; #include &amp;lt;cstring&amp;gt;const int N = 2005; struct BigInt { int len, s[N]; BigInt() {memset(s, 0, sizeof(s));len = 1;} BigInt(int num) { *this = num; } BigInt(char *num) { *this = num; } BigInt operator=(int num) { char c[N]; sprintf(c, &amp;#34;%d&amp;#34;, num); *this = c; return *this; } BigInt operator=(const char *num) { len = strlen(num); for (int i = 0; i &amp;lt; len; i++) s[i] = num[len - 1 - i] - &amp;#39;0&amp;#39;; return *this; } string str() { string res = &amp;#34;&amp;#34;; for (int i = 0; i &amp;lt; len; i++) res = (char) (s[i] + &amp;#39;0&amp;#39;) + res; return res; } void clean() {while (len &amp;gt; 1 &amp;amp;&amp;amp; !</description>
    </item>
    
    <item>
      <title>Algorithm3 交叉</title>
      <link>http://www.chenranfei.online/posts/acm/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/algorithm3-%E4%BA%A4%E5%8F%89/</link>
      <pubDate>Mon, 01 Feb 2021 19:03:55 +0800</pubDate>
      
      <guid>http://www.chenranfei.online/posts/acm/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/algorithm3-%E4%BA%A4%E5%8F%89/</guid>
      <description>交叉 交换纸牌：使之数量相等 题目链接：https://www.luogu.com.cn/problem/P1031
1、题目大意是允许相邻的两个牌堆交叉换牌
2、解决方案就是把交叉换成单向，然后通过单边尽头单向遍历简化问题【单边尽头单向可以的原因就是每次至少保证满足1个，然后就算是其他的中间往两边的，也最多了，每次只能满足一个，所以不如直接 单边 尽头 =&amp;gt; 方便遍历】
#include &amp;lt;iostream&amp;gt;using namespace std; #define maxn 105int n, a[maxn], sum = 0, ans = 0; int main() { scanf(&amp;#34;%d&amp;#34;, &amp;amp;n); for (int i = 0; i &amp;lt; n; i++) {scanf(&amp;#34;%d&amp;#34;, &amp;amp;a[i]);sum += a[i];} sum /= n; for (int i = 0; i &amp;lt; n - 1; ++i) if (a[i] != sum) { a[i + 1] -= (sum - a[i]); ans++; } printf(&amp;#34;%d\n&amp;#34;, ans); return 0; } </description>
    </item>
    
    <item>
      <title>Algorithm4 十种排序</title>
      <link>http://www.chenranfei.online/posts/acm/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/algorithm4-%E6%8E%92%E5%BA%8F%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Mon, 01 Feb 2021 19:03:55 +0800</pubDate>
      
      <guid>http://www.chenranfei.online/posts/acm/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/algorithm4-%E6%8E%92%E5%BA%8F%E5%AE%9E%E7%8E%B0/</guid>
      <description>排序  暴力遍历：O(n^2)
 冒泡排序【稳定】：最大的往后冒泡，保证「每次提取最大」的，然后「放到最后」 选择排序【不稳定】：「拿到合适的然后放置」选择出最值以及最值的索引，然后进行交换。 插入排序【稳定】：「拿到然后找合适的地方放置」对每次拿到的数，找到合适的位置插入进去  普通插入是O(n^2)，折半插入是O(nlog2n)，原因就是在选择合适的位置的时候，会进行二分折半查找，而不是暴力从一端到另一端查找了    介于暴力与递归之间的：O(n^(1.3-2))
 希尔排序【不稳定】：三大步，首先对半分，两半一对一匹配进行插入排序；然后对半分的两类内部分别进行插入，然后对整体进行插入排序。  递归 二分与合并： $$ O(n*log_n2) $$
 快速排序【不稳定】：首先移动，然后「合理的分割」 归并排序【稳定】：「分割」，然后「合理的合并」  递归 桶 多分与合并：
 计数排序：n个数n个桶，然后把n个桶再合并 桶排序：n个数k个桶，k个桶各自进行排序，然后再把k个桶合并 基数排序【稳定】：n个数10个桶，10个桶为首位/尾位的是个数字对应的数。  思路一：先合并，然后再根据首位/尾位的下面一位接着入桶 思路二：对每一个桶分别根据下一位再重新进小小桶，然后对小小桶进行合并，再对大桶进行合并    其他： $$ O(n*log_n2) $$
 锦标赛排序/堆排序【不稳定】：利用类似于堆/树的log2n的结构来提取最大/最小，然后放在首/尾。  利用最小堆：递增排序 利用最大堆：递减排序     \alpha
题目链接：https://www.luogu.com.cn/problem/P1177
题目大意：实现快排
1、所有排序算法的函数形式都是可以写成sort_algorithm(int[] arr, int l,int r){}
2、找分块的标准数的部分快排的核心思想就是找一个数，来作为分块标准，而不是找一个分割的数的索引，因为索引的话，会随着swap()变换而导致本来已经确定的数变化。
3、分块的部分，可以通过前后遍历，碰到一对分别小于、大于的，直接swap()掉即可。但是会引发一个问题，就是如果碰到了一边刚好完全都是符合那个标准的，然后另一边存在不符合标准的，此时就需要把标准和不符合标准的换位置了。
4、递归的部分，边界的设定问题，存在有刚好极端情况也就是分块的标准数刚好是最大或者最小的，那就不用再递归他了。所以要判断l &amp;lt; j或者i &amp;lt; r也就是排除了最大最小两种极端情况，其他的次大次小=&amp;gt;都要老老实实的把长度为2的给往下递归
void quicksort(int l, int r){ int mid = a[(l+r)/2], i = l, j = r; do{ while (a[i] &amp;lt; mid) i++; while (a[j] &amp;gt; mid) j--; if (i &amp;lt;= j) {swap(a[i], a[j]);i++;j--;} }while (i &amp;lt;= j); // recursion left and right  if (l &amp;lt; j) quicksort(l, j); if (i &amp;lt; r) quicksort(i, r); } </description>
    </item>
    
    <item>
      <title>Algorithm5 Advanced Sort</title>
      <link>http://www.chenranfei.online/posts/acm/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/algorithm5-%E6%8E%92%E5%BA%8F%E8%BF%9B%E9%98%B6-%E6%AF%94%E8%BE%83/</link>
      <pubDate>Mon, 01 Feb 2021 19:03:55 +0800</pubDate>
      
      <guid>http://www.chenranfei.online/posts/acm/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/algorithm5-%E6%8E%92%E5%BA%8F%E8%BF%9B%E9%98%B6-%E6%AF%94%E8%BE%83/</guid>
      <description>排序变种 用优先队列实现的顶部最大 &amp;amp; 顶部最小 最大：priority_queue&amp;lt;int, vector&amp;lt;int&amp;gt;, greater&amp;lt;int&amp;gt;&amp;gt; pq;
最小：priority_queue&amp;lt;int&amp;gt; pq;
https://www.luogu.com.cn/problem/P3378
#include &amp;lt;iostream&amp;gt;using namespace std; #include &amp;lt;queue&amp;gt;priority_queue&amp;lt;int, vector&amp;lt;int&amp;gt;, greater&amp;lt;int&amp;gt;&amp;gt; pq; int m, op, t; int main() { scanf(&amp;#34;%d&amp;#34;, &amp;amp;m); while (m--) { scanf(&amp;#34;%d&amp;#34;, &amp;amp;op); switch (op) { case 1: scanf(&amp;#34;%d&amp;#34;, &amp;amp;t);pq.push(t);break; case 2: printf(&amp;#34;%d\n&amp;#34;, pq.top());break; case 3: pq.pop();break; } } return 0; } 结合结构体的排序 &amp;amp;&amp;amp; 直接利用优先队列实现的排序 https://www.luogu.com.cn/problem/P1068
题目大意：按照成绩选人【多个】，但是每个人有编号和成绩两个属性是相互绑定的，所以用结构体储存很好。
考点：如果选人的个数是一个的话直接遍历==&amp;gt;区分下面的宇宙总统，宇宙总统就是选一个，但是比较的元素是大数，考点在大数；而这个题选人的个数是多个=&amp;gt;一边遍历就不合适了，直接排序即可。
而此题是
1、重载运算符，结合优先队列，直接根据成绩进行排名。 // 或者根据向量+sort排序，但是这样重载运算符的时候有区别。
2、**易错：重载的时候，成绩相同看看其他属性有没有要求。**=&amp;gt;如果成绩相同，编号小的靠前。
struct node { int id, score; node(int id, int score): id(id), score(score){} bool operator &amp;lt; (const node n) const{ if (score == n.</description>
    </item>
    
    <item>
      <title>Algorithm6 贪心问题</title>
      <link>http://www.chenranfei.online/posts/acm/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/algorithm6-%E8%B4%AA%E5%BF%83/</link>
      <pubDate>Mon, 01 Feb 2021 19:03:55 +0800</pubDate>
      
      <guid>http://www.chenranfei.online/posts/acm/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/algorithm6-%E8%B4%AA%E5%BF%83/</guid>
      <description>贪心问题 装袋问题-每个袋子限制个数为两个 https://www.luogu.com.cn/problem/P1094
题目大意：给出若干个不同容量的东西，给出限定的最大容量的袋子，然后最少用多少个袋子装完这些不同容量东西
思路1【错误】：维护一个优先队列，每次取顶上两个，然后放一块。不行的原因，一些特殊情况，例如袋子100，物品分别为20、20、30、50、60，如果顺次加起来的话，=&amp;gt;30、40、50、60=&amp;gt;50、60、70，最后三个袋子，最少装袋是两个，20+20+60和30+50。
priority_queue&amp;lt;int, vector&amp;lt;int&amp;gt;, greater&amp;lt;int&amp;gt;&amp;gt; pq; int main() { scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;k, &amp;amp;n); for (int i = 0; i &amp;lt; n; ++i) { scanf(&amp;#34;%d&amp;#34;, &amp;amp;tem); pq.push(tem); } while (true){ int tmp1 = pq.top();pq.pop(); int tmp2 = pq.top();pq.pop(); cout&amp;lt;&amp;lt;tmp1&amp;lt;&amp;lt;&amp;#34;&amp;#34;&amp;lt;&amp;lt;tmp2&amp;lt;&amp;lt;endl; if (tmp1 + tmp2 &amp;gt; k) {pq.push(tmp1);pq.push(tmp2);break;} else pq.push(tmp1+tmp2); } printf(&amp;#34;%d\n&amp;#34;, pq.size()); return 0; } 思路2【正确】：由于题目还有一个附加条件=&amp;gt;每个袋子最多两个（=&amp;gt;也在一定程度上约束了两个）用双指针，首尾各一个，分别用来指代放在袋子的两个：够了就放一个袋子里，指针都往中间移动；不够就只把大的往中间移。前提是排好序
#include &amp;lt;iostream&amp;gt;using namespace std; #define maxn 30010int k, n, tem, a[maxn], ans = 0; #include &amp;lt;algorithm&amp;gt; int main() { scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;k, &amp;amp;n); for (int i = 0; i &amp;lt; n; ++i) scanf(&amp;#34;%d&amp;#34;, &amp;amp;a[i]); sort(a, a+n); int fidx = 0, eidx = n-1; while (fidx &amp;lt;= eidx) if (a[fidx] + a[eidx] &amp;lt;= k) fidx++, eidx--, ans++; else eidx--, ans++; printf(&amp;#34;%d\n&amp;#34;, ans); return 0; } 装袋问题-无限制个数的装袋 排序贪心 https://www.</description>
    </item>
    
    <item>
      <title>Algorithm6.1 贪心 VS 其他算法</title>
      <link>http://www.chenranfei.online/posts/acm/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/algorithm6.1-%E8%B4%AA%E5%BF%83vs%E5%85%B6%E4%BB%96/</link>
      <pubDate>Mon, 01 Feb 2021 19:03:55 +0800</pubDate>
      
      <guid>http://www.chenranfei.online/posts/acm/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/algorithm6.1-%E8%B4%AA%E5%BF%83vs%E5%85%B6%E4%BB%96/</guid>
      <description>二分  一些第一眼看上去是用贪心解决，但实际上是需要用其他算法解决的问题
 https://www.luogu.com.cn/problem/P1570【看起来是贪心，实际上是找出答案的范围然后二分出结果】
题目大意：选取m个，然后问怎么选，才能保证属性a求和比上属性b求和的值最大
思路一：【贪心】按照属性a和属性b的比值进行排序，然后贪心的选取前m个。单个的VS求和的，有冲突
（反例：400 1和200 100 1 1）在选取了400 1之后，如果根据比例会优先选200 100，但是实际上在求和中要选1 1，
思路二：【二分】进行算式推导，推导成关于要求解的数的一个方程式，然后进行二分，来调整解，逼近解
#include &amp;lt;iostream&amp;gt;using namespace std; const int maxn = 205; int n, m, a[maxn], b[maxn]; double l, mid, r; #include &amp;lt;algorithm&amp;gt; double check(double x) { double w[maxn]; for (int i = 1; i &amp;lt;= n; ++i) w[i] = b[i]*x-a[i]; sort(w+1, w+1+n); double tmp = 0; for (int i = 1; i &amp;lt;= m; ++i) tmp += w[i]; return tmp; } int main() { scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;n, &amp;amp;m); for (int i = 1; i &amp;lt;= n; ++i) scanf(&amp;#34;%d&amp;#34;, a+i); for (int i = 1; i &amp;lt;= n; ++i) { scanf(&amp;#34;%d&amp;#34;, b+i); r = max(r, a[i]*1.</description>
    </item>
    
    <item>
      <title>Algorithm7 分治算法 &amp; 快速幂</title>
      <link>http://www.chenranfei.online/posts/acm/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/algorithm7-%E5%88%86%E6%B2%BB-%E5%BF%AB%E9%80%9F%E5%B9%82/</link>
      <pubDate>Mon, 01 Feb 2021 19:03:55 +0800</pubDate>
      
      <guid>http://www.chenranfei.online/posts/acm/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/algorithm7-%E5%88%86%E6%B2%BB-%E5%BF%AB%E9%80%9F%E5%B9%82/</guid>
      <description>分治问题 最典型：分形 &amp;amp; 矩阵的分治  矩形分治的 统一解法 // 模版：数据结构用一个统一的数组来存储 图//矩阵 结构【init】，然后 分形//分治 递归【draw】，最后再画出来【print】（或者有的时候需要输出分治的过程）
 矩阵的分治：https://www.luogu.com.cn/problem/P5461
题目大意：正方形矩阵，分成四块，左上全赦免（为零），然后对剩下其他部分接着分成四块，一直这样下去。输出最后矩阵
#include &amp;lt;iostream&amp;gt;using namespace std; #define maxl 1030int n, a[maxl][maxl]; #include &amp;lt;cstring&amp;gt;#define cl(a, b) memset(a, b, sizeof(a))#include &amp;lt;cmath&amp;gt; void draw(int x, int y, int h) { if (h == 2) {a[x+1][y] = a[x][y+1] = a[x+1][y+1] = 1;return;} int nowh = h&amp;gt;&amp;gt;1; draw(x+nowh, y, nowh); draw(x, y+nowh, nowh); draw(x+nowh, y+nowh, nowh); } void print() { for (int i = 1; i &amp;lt;= n; ++i) { for (int j = 1; j &amp;lt;= n; ++j) { printf(&amp;#34;%d &amp;#34;, a[i][j]); } printf(&amp;#34;\n&amp;#34;); } } int main() { scanf(&amp;#34;%d&amp;#34;, &amp;amp;n); n = pow(2, n); cl(a, 0); // init  draw(1, 1, n); // draw  print(); // print  return 0; } 分形-谢尔宾斯基三角：https://www.</description>
    </item>
    
  </channel>
</rss>