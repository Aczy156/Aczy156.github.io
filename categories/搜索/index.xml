<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>搜索 on Aczy156</title>
    <link>https://chenranfei.site/categories/%E6%90%9C%E7%B4%A2/</link>
    <description>Recent content in 搜索 on Aczy156</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Aczy156</copyright>
    <lastBuildDate>Mon, 01 Feb 2021 19:03:55 +0800</lastBuildDate>
    
	<atom:link href="https://chenranfei.site/categories/%E6%90%9C%E7%B4%A2/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Algorithm8.1 BFS</title>
      <link>https://chenranfei.site/posts/acm/%E6%90%9C%E7%B4%A2/algorithm8.1-bfs/</link>
      <pubDate>Mon, 01 Feb 2021 19:03:55 +0800</pubDate>
      
      <guid>https://chenranfei.site/posts/acm/%E6%90%9C%E7%B4%A2/algorithm8.1-bfs/</guid>
      <description>[TOC]
bfs [模版] 最多可到达 https://www.luogu.com.cn/problem/P1683
题目大意：最多可到达的格点数
#include &amp;lt;iostream&amp;gt;using namespace std; #define maxn 23int n, m, dir[4][2]={{0, 1}, {0, -1}, {1, 0}, {-1, 0}}, ans=1, vis[maxn][maxn]; char mp[maxn][maxn]; #include &amp;lt;queue&amp;gt;struct node{ int x, y; node(int x,int y): x(x), y(y){} }; queue&amp;lt;node&amp;gt; q; void bfs(int x, int y) { q.push(node(x, y)); vis[x][y] = 1; while (!q.empty()) { node nw = q.front();q.pop(); for (int i = 0; i &amp;lt; 4; ++i) { int nx = nw.</description>
    </item>
    
    <item>
      <title>Algorithm8.2 DFS</title>
      <link>https://chenranfei.site/posts/acm/%E6%90%9C%E7%B4%A2/algorithm8-dfs/</link>
      <pubDate>Mon, 01 Feb 2021 19:03:55 +0800</pubDate>
      
      <guid>https://chenranfei.site/posts/acm/%E6%90%9C%E7%B4%A2/algorithm8-dfs/</guid>
      <description>[TOC]
dfs  向深递归
 传参的确定 =&amp;gt; 可以利用好递归调用栈机制 状态的判断 =&amp;gt; 递归到每一层之后，所有参数共同组合决定出一个状态，这个状态维护是否重复   [数组一维模版 &amp;amp; 分层] 全排列 https://www.luogu.com.cn/problem/P1706
#include &amp;lt;iostream&amp;gt;using namespace std; int n, a[12], vis[12]; void dfs(int l) { if (l == n) { for (int i = 0; i &amp;lt; n; ++i) printf(&amp;#34;%5d&amp;#34;, a[i]); printf(&amp;#34;\n&amp;#34;); return; } for (int i = 1; i &amp;lt;= n; ++i) { if (!vis[i]) { a[l] = i;vis[i] = 1; dfs(l+1); vis[i] = 0; } } } int main() { scanf(&amp;#34;%d&amp;#34;, &amp;amp;n); dfs(0); return 0; } 素数环 &amp;amp; 分层 https://www.</description>
    </item>
    
    <item>
      <title>Algorithm8.2 DFS进阶-TLE情况的解决方案</title>
      <link>https://chenranfei.site/posts/acm/%E6%90%9C%E7%B4%A2/algorithm8.2-dfs%E8%BF%9B%E9%98%B6-tle%E6%83%85%E5%86%B5%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
      <pubDate>Mon, 01 Feb 2021 19:03:55 +0800</pubDate>
      
      <guid>https://chenranfei.site/posts/acm/%E6%90%9C%E7%B4%A2/algorithm8.2-dfs%E8%BF%9B%E9%98%B6-tle%E6%83%85%E5%86%B5%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
      <description>[TOC]
DFS进阶-TLE情况的解决方案  解决方案
 「一」通过剪枝缩小搜索范围 「二」记忆化搜索 - 添加一个v数组 // dp数组，来记录DFS所有触及到的状态，防止再次访问 「其他」DP解决   https://www.luogu.com.cn/problem/P1077
「一」剪枝缩小搜索范围 关键是找清楚搜索维度的变量变化，找清楚哪些是递归进入的变量，哪些。该题一开始就看作的是层上dfs，然后通过l来作为依据进行搜索，l来作为return的依据，写出如下代码：
// 搜索 int cnt, ans; void dfs(int l) { if (l == n) { if (cnt == m) ans++;return;} for (int i = 0; i &amp;lt;= a[l+1]; ++i) { cnt+=i;dfs(l+1);cnt-=i; } } 可以看到其实cnt，（本来是一个全局变量）也可以写成递归的一个依据，因为进入之前与之后有相反操作，因此优化
int ans; void dfs(int l, int cnt) { if (l == n) { if (cnt == m) ans++;return; } for (int i = 0; i &amp;lt;= a[l+1]; ++i) dfs(l+1, cnt+i); } 「二」记忆化搜索 - 记录状态，防止重复访问  核心：</description>
    </item>
    
    <item>
      <title>Algorithm8.3 DFS 记忆化搜索</title>
      <link>https://chenranfei.site/posts/acm/%E6%90%9C%E7%B4%A2/algorithm8.3-dfs%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2/</link>
      <pubDate>Mon, 01 Feb 2021 19:03:55 +0800</pubDate>
      
      <guid>https://chenranfei.site/posts/acm/%E6%90%9C%E7%B4%A2/algorithm8.3-dfs%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2/</guid>
      <description>[TOC]
DFS 记忆化搜索 用于相邻依赖 =&amp;gt; 涂色：相邻的不能相同；连续递增/连续递减 搜索的形式+dp的存储思想，把dp数组融合到dfs搜索的过程中。
[模版] 记忆化搜索 - 优化重复递归调用 https://www.luogu.com.cn/problem/P1464
题目大意：纯粹的重复递归调用，极限的话20 * 20 * 20次不同的计算要被一直算，如果可以记录下来，那么这么多次运算只需要算一遍。
1、用dp来记录下来每次的递归结果，也就是return之前先给dp附上值。return dp=w();
2、注意return的时候，看看边界条件，特判条件放在前面先return；递归条件放后面return
#include &amp;lt;iostream&amp;gt;using namespace std; #define maxn 25typedef long long ll; ll ta, tb, tc, dp[maxn][maxn][maxn]; ll dfs(int a, int b, int c) { if (a &amp;lt;= 0 || b &amp;lt;= 0 || c &amp;lt;= 0) return 1; if (a &amp;gt; 20 || b &amp;gt; 20 || c &amp;gt; 20) return dfs(20, 20, 20); if (dp[a][b][c]) return dp[a][b][c]; if (a &amp;lt; b &amp;amp;&amp;amp; b &amp;lt; c) return dp[a][b][c] = dfs(a, b, c-1) + dfs(a, b-1, c-1) - dfs(a, b-1, c); else return dp[a][b][c] = dfs(a-1, b, c) + dfs(a-1, b-1, c) + dfs(a-1, b, c-1) - dfs(a-1, b-1, c-1); } int main() { while (scanf(&amp;#34;%lld%lld%lld&amp;#34;, &amp;amp;ta, &amp;amp;tb, &amp;amp;tc) &amp;amp;&amp;amp; !</description>
    </item>
    
    <item>
      <title>Algorithm8.5 搜索思维题 &amp; 数字题目类型整合</title>
      <link>https://chenranfei.site/posts/acm/%E6%90%9C%E7%B4%A2/algorithm8.5-%E6%90%9C%E7%B4%A2%E6%80%9D%E7%BB%B4%E9%A2%98/</link>
      <pubDate>Mon, 01 Feb 2021 19:03:55 +0800</pubDate>
      
      <guid>https://chenranfei.site/posts/acm/%E6%90%9C%E7%B4%A2/algorithm8.5-%E6%90%9C%E7%B4%A2%E6%80%9D%E7%BB%B4%E9%A2%98/</guid>
      <description>[TOC]
搜索思维题  特点：可以用搜索，但是可能会T或者需要剪枝过多
 特殊地图（某方向固定长度）起点到终点 + 特殊走法：考虑按照特殊方向进行模拟 特殊走法（不允许往某个方向走）：考虑直接全盘dp   特殊地图起点到终点-特殊走法：  两行地图 特殊走法，只往一边走更优  特殊走法：  某单个方向不能走  // 搜索 int cnt, ans; void dfs(int l) { if (l == n) { if (cnt == m) ans++;return;} for (int i = 0; i &amp;lt;= a[l+1]; ++i) { cnt+=i;dfs(l+1);cnt-=i; } } 可以看到其实cnt，（本来是一个全局变量）也可以写成递归的一个依据，因为进入之前与之后有相反操作，因此优化
int ans; void dfs(int l, int cnt) { if (l == n) { if (cnt == m) ans++;return; } for (int i = 0; i &amp;lt;= a[l+1]; ++i) dfs(l+1, cnt+i); } 记忆化搜索 https://www.</description>
    </item>
    
    <item>
      <title>Algorithm8.6 数字类型题目整合</title>
      <link>https://chenranfei.site/posts/acm/%E6%90%9C%E7%B4%A2/algorithm8.6-%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B%E9%A2%98%E7%9B%AE%E6%95%B4%E5%90%88/</link>
      <pubDate>Mon, 01 Feb 2021 19:03:55 +0800</pubDate>
      
      <guid>https://chenranfei.site/posts/acm/%E6%90%9C%E7%B4%A2/algorithm8.6-%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B%E9%A2%98%E7%9B%AE%E6%95%B4%E5%90%88/</guid>
      <description>[TOC]
数字类型题目整合  数字题目类型整合：
 若干个数相加组合成目标数的方案总和 小于等于4个数的平方的和组合成目标数的方案总和 给定一个数，问随意将这个数进行拆解，然后拆解得到的数做乘积，求乘积最大值   dfs转计数dp 问题1:若干个数相加组合成目标数的方案总和-可用dfs+剪枝出来 https://www.luogu.com.cn/problem/P1025
1、计数问题，dfs暴力搜
#include &amp;lt;iostream&amp;gt;using namespace std; #define maxtotal 205#define maxn 8int n, total, ans, dp[maxn][maxtotal]; void dfs(int last, int l, int val){ if (l == n) { if (val == total) ans++; return; } for (int i = last; val+i*(n-l)&amp;lt;=total; ++i) dfs(i, l+1, val+i); } int main() { scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;total, &amp;amp;n); dfs(1, 0, 0); printf(&amp;#34;%d\n&amp;#34;, ans); return 0; } 2、利用dp实现</description>
    </item>
    
  </channel>
</rss>